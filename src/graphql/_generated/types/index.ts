// Code generated by github.com/prisma/graphqlgen, DO NOT EDIT.

import { GraphQLResolveInfo } from "graphql";
import { Jokes, Joke } from "../../models/interfaces/jokes";
type Context = any;

export type JokeCategoryEnum = "NERDY" | "EXPLICIT";

export namespace QueryResolvers {
  export const defaultResolvers = {};

  export type JokesResolver = (
    parent: undefined,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Jokes | null | Promise<Jokes | null>;

  export interface Type {
    jokes: (
      parent: undefined,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Jokes | null | Promise<Jokes | null>;
  }
}

export namespace JokesResolvers {
  export const defaultResolvers = {};

  export interface ArgsByCategory {
    category?: JokeCategoryEnum | null;
  }

  export interface ArgsById {
    id: number;
  }

  export type ByCategoryResolver = (
    parent: Jokes,
    args: ArgsByCategory,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Joke | null | Promise<Joke | null>;

  export type ByIdResolver = (
    parent: Jokes,
    args: ArgsById,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Joke | null | Promise<Joke | null>;

  export interface Type {
    byCategory: (
      parent: Jokes,
      args: ArgsByCategory,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Joke | null | Promise<Joke | null>;

    byId: (
      parent: Jokes,
      args: ArgsById,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Joke | null | Promise<Joke | null>;
  }
}

export namespace JokeResolvers {
  export const defaultResolvers = {
    id: (parent: Joke) => parent.id,
    text: (parent: Joke) => parent.text,
    categories: (parent: Joke) => parent.categories
  };

  export type IdResolver = (
    parent: Joke,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type TextResolver = (
    parent: Joke,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type CategoriesResolver = (
    parent: Joke,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) =>
    | Array<JokeCategoryEnum | null>
    | null
    | Promise<Array<JokeCategoryEnum | null> | null>;

  export interface Type {
    id: (
      parent: Joke,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    text: (
      parent: Joke,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    categories: (
      parent: Joke,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) =>
      | Array<JokeCategoryEnum | null>
      | null
      | Promise<Array<JokeCategoryEnum | null> | null>;
  }
}

export interface Resolvers {
  Query: QueryResolvers.Type;
  Jokes: JokesResolvers.Type;
  Joke: JokeResolvers.Type;
}
